package appointment;

import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Button;

import javafx.scene.layout.HBox;
import javafx.stage.Stage;
import note.Note;
import javafx.scene.control.TextField;
import javafx.scene.control.TreeItem;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;

import java.net.URL;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.ResourceBundle;

import javax.security.auth.callback.LanguageCallback;

import calendar.Calendar;
import calendar.CalendarController;
import category.CategoriesController;
import category.Category;
import creator.Creator;
import javafx.application.Platform;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;

import javafx.scene.control.CheckBox;

import javafx.scene.control.DatePicker;
import javafx.scene.control.TextArea;
import javafx.scene.control.ChoiceBox;

public class AppointmentCreatorController implements Initializable {
	ObservableList<String> regularlyTypeList = FXCollections.observableArrayList("täglich", "wöchentlich", "monatlich", "jährlich");
	
	@FXML
	private TextField AppointmentTitle;
	@FXML
	private DatePicker AppointmentStartDate;
	@FXML
	private TextField AppointmentStartTime;
	@FXML
	private DatePicker AppointmentEndDate;
	@FXML
	private TextField AppointmentEndTime;
	@FXML
	private CheckBox AppointmentRegularlyOnOff;
	@FXML
	private ChoiceBox AppointmentRegularlyType;
	@FXML
	private CheckBox AppointmentAllDay;
	@FXML
	private Button AppoinmentPinNote;
	@FXML
	private CheckBox AppointmentAlarmOnOff;
	@FXML
	private DatePicker AppointmentAlarmDate;
	@FXML
	private TextField AppointmentAlarmTime;
	@FXML
	private TextArea AppointmentDescription;
	@FXML
	private Button AppointmentSave;
	@FXML
	private ChoiceBox<TreeItem<String>> chooseCategory = new ChoiceBox<>();
	Image icon = new Image(getClass().getResourceAsStream("/images/Kalender.png"));

	// Event Listener on Button[#AppoinmentPinNote].onAction jk
	@FXML
	public void appointmentPinNotePress(ActionEvent event) {
		// TODO Autogenerated
	}

	// Event Listener on Button[#AppointmentSave].onAction
	@FXML
	public void appointmentSavePress(ActionEvent event) {

		Appointment serObj = new Appointment("Stupid Appointment", null, null, false, false, 0, 0, "Some stupid text",
				0, null, false);

		Appointment.WriteObjectToFile(serObj);

		// TODO Autogenerated
		// Save the current Category
		if (!chooseCategory.getSelectionModel().getSelectedItem().equals(null)) {
			TreeItem<String> savePosition = chooseCategory.getSelectionModel().getSelectedItem();
			TreeItem<String> newItem = new TreeItem<String>("Termin: " + AppointmentTitle.getText(),
					new ImageView(icon));
			CategoriesController.insertCategoryByCreator(savePosition, newItem);
		}
		// Save the appointment
		LocalDate save = AppointmentEndDate.getValue();
		CalendarController.addAppointment(save, AppointmentTitle.getText());
		String title = AppointmentTitle.getText();
		// LocalDateTime startpoint = LocalDateTime.of(AppointmentStartDate.getValue(),
		// LocalTime.parse(AppointmentStartTime.getText(), Calendar.timeFormatter));
		LocalDateTime endpoint = LocalDateTime.of(AppointmentEndDate.getValue(),
				LocalTime.parse(AppointmentEndTime.getText(), Calendar.timeFormatter));
		boolean allDay = AppointmentAllDay.isSelected();
		boolean regularlyOnOff = AppointmentRegularlyOnOff.isSelected();
		String regularlyTypeString = (String) AppointmentRegularlyType.getValue();
		int regularlyType=10;
		if(regularlyTypeString == "täglich") {
			regularlyType=0;
		}
		else if(regularlyTypeString == "wöchentlich") {
			regularlyType=1;
		}
		else if(regularlyTypeString == "monatlich") {
			regularlyType=2;
		}
		else if(regularlyTypeString == "jährlich") {
			regularlyType=3;
		}
		int regularlyAmount;
		String description = AppointmentDescription.getText();
		int notesPinned;
		ArrayList<Note> notesLink;
		boolean floating;
		// TreeItem<String> chosenCategory =
		// chooseCategory.getSelectionModel().getSelectedItem();;
		
		System.out.println(regularlyTypeString + regularlyType);
		//Creator.createAppointment(title, startpoint, endpoint, allDay, regularlyOnOff, regularlyType, regularlyAmount,
		//		description, notesPinned, notesLink, floating, chosenCategory);
	}

	@Override
	public void initialize(URL location, ResourceBundle resources) {
		for (int i = 0; i < CategoriesController.getMainCategories().size(); i++) {
			chooseCategory.getItems().addAll(CategoriesController.getMainCategories().get(i));
		}
		
		AppointmentRegularlyType.setItems(regularlyTypeList);
		
		AppointmentRegularlyOnOff.selectedProperty().bindBidirectional(AppointmentRegularlyType.visibleProperty());
	}
}
